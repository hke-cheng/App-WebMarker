{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Divider from \"./Divider\";\n\nfunction Panel(props) {\n  const {\n    children,\n    value,\n    index\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n  return __jsx(\"div\", _extends({\n    hidden: value !== index,\n    id: `simple-tabpanel-${index}`,\n    \"aria-labelledby\": `simple-tab-${index}`\n  }, other), value === index && __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }\n  }, __jsx(Divider, {\n    vertical: true,\n    space: \"24px\"\n  }), children, __jsx(\"div\", null, \"Edit\")));\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired\n};\nexport default Panel;","map":{"version":3,"sources":["/Users/chenghanke/Desktop/编程学习/App-markWebsite/components/TabPanel.js"],"names":["React","PropTypes","withStyles","Divider","Panel","props","children","value","index","other","display","flexDirection","justifyContent","alignItems","TabPanel","propTypes","node","any","isRequired"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,MAAuCH,KAA7C;AAAA,QAAmCI,KAAnC,4BAA6CJ,KAA7C;;AACA,SACE;AACE,IAAA,MAAM,EAAEE,KAAK,KAAKC,KADpB;AAEE,IAAA,EAAE,EAAG,mBAAkBA,KAAM,EAF/B;AAGE,uBAAkB,cAAaA,KAAM;AAHvC,KAIMC,KAJN,GAMGF,KAAK,KAAKC,KAAV,IACC;AAAK,IAAA,KAAK,EAAE;AAAEE,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,aAAa,EAAE,QAAlC;AAA4CC,MAAAA,cAAc,EAAE,QAA5D;AAAsEC,MAAAA,UAAU,EAAE;AAAlF;AAAZ,KACE,MAAC,OAAD;AAAS,IAAA,QAAQ,MAAjB;AAAkB,IAAA,KAAK,EAAC;AAAxB,IADF,EAEGP,QAFH,EAIE,0BAJF,CAPJ,CADF;AAkBD;;AAEDQ,QAAQ,CAACC,SAAT,GAAqB;AACnBT,EAAAA,QAAQ,EAAEL,SAAS,CAACe,IADD;AAEnBR,EAAAA,KAAK,EAAEP,SAAS,CAACgB,GAAV,CAAcC,UAFF;AAGnBX,EAAAA,KAAK,EAAEN,SAAS,CAACgB,GAAV,CAAcC;AAHF,CAArB;AAOA,eAAed,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport Divider from \"./Divider\";\n\n\nfunction Panel(props) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\n          <Divider vertical space=\"24px\" />\n          {children}\n\n          <div>Edit</div>\n\n        </div>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\n\nexport default Panel;"]},"metadata":{},"sourceType":"module"}